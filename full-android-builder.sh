#!/bin/bash

###################################################################
#Script Name            : PJSIP Android Builder w/TLS+VIDEO Support
#Description            : This script builds PJSIP FOR ANDROID w/VIDEO & w/AUDIO & w/TLS/SSL support
#Args                       : h264 openSSL
#Author                 : Emre TUFEKCI
#Email                  : tufekci.emre@tubitak.gov.tr
###################################################################


#### Copy this script to the main directory of PJSIP

#### VARIABLES CAN BE CHANGED
### H264 ###

################################## IMPORTANT NOTE #############################################
#####       Usage:                                                                        #####
#####       1- Put the present script inside the pjproject folder                         #####
#####       2- chmod +x full-android-builder                                              #####
#####       3- Run :                                                                      #####
#####   ./full-android-builder h264 openssl <all|arm64-v8a|armeabi-v7a|x86|x86_64>        #####
###############################################################################################

dt=$(date '+%d/%m/%Y %H:%M:%S')
echo "$dt : Beginning build"

# H264 -> v2.6.0 (Fev 12, 2025)
h264_link=https://github.com/cisco/openh264/archive/refs/tags/v2.6.0.zip

### OPENSSL ###
# OPENSSL -> 3.4.1 (Feb 11, 2025)
# Or BoringSSL -> 0.20250212.0 (Feb 13, 2025)
openssl_link=https://github.com/openssl/openssl/releases/download/openssl-3.4.1/openssl-3.4.1.tar.gz
#openssl_link=https://github.com/google/boringssl/releases/download/0.20250212.0/boringssl-0.20250212.0.tar.gz

### OPUS ###
# OPUS -> 1.5.2 (Sep 11, 2024)
opus_link=https://github.com/xiph/opus/releases/download/v1.5.2/opus-1.5.2.tar.gz

### BCG729 ###
# Latest Master
bcg729_link=https://github.com/BelledonneCommunications/bcg729/archive/refs/heads/master.zip

### NDK ###
# NDK -> R27c (Oct 16, 2024)
ndk_link=https://dl.google.com/android/repository/android-ndk-r27c-linux.zip

h264_build=true
openSSL_build=true
ANDROID_NDK_FOLDERNAME=android-ndk-r27c
OPENSSL_FOLDERNAME=openssl-3.4.1
#OPENSSL_FOLDERNAME=boringssl-0.20250212.0
OPENH264_FOLDERNAME=openh264-2.6.0
OPUS_FOLDERNAME=opus-1.5.2
BCG729_FOLDERNAME=bcg729-master

PJSIP_ADDITIONAL_OPTIONS="--disable-ilbc-codec --disable-gsm-codec --disable-l16-codec --disable-speex-codec"
PJSIP_ADDITIONAL_OPTIONS=""
WITH_BCG729_OPTION="--with-bcg729=$PWD/$BCG729_FOLDERNAME"
WITH_OPUS_OPTION="--with-opus=$PWD/$OPUS_FOLDERNAME"
WITH_SSL_OPTION="--with-ssl=$PWD/$OPENSSL_FOLDERNAME"
WITH_OPENH264_OPTION="--with-openh264=$PWD/$OPENH264_FOLDERNAME/android"

if [ "${1^^}" = "H264" ] || [ "${2^^}" = "H264" ]
then
h264_build=true
fi

if [ "${1^^}" = "OPENSSL" ] || [ "${2^^}" = "OPENSSL" ]
then
openSSL_build=true
fi


build_platform="${3^^}"
if [ "$3" = "" ] || [ -z "$3" ]
then
build_platform="ALL"
fi

echo "build platform is $build_platform"

### CHECK IS OPENSSL BUILDING ###
if [ ${openSSL_build} == true ]; then
    echo "Building openSSL..."
fi

if [ ${openSSL_build} == false ]; then
    echo "NO openSSL!"
fi

### CHECK IS H264 BUILDING ###
if [ ${h264_build} == true ]; then
    echo "Building H264..."
fi
if [ ${h264_build} == false ]; then
    echo "NO H264!"
fi




######## IMPORTANT NOTE! ########
### YOU SHOULD RUN THIS SCRIPT AS <. android-builder.sh architecture-version> (e.g.: ". android-builder.sh arm64-v8a")

echo "-(tput setaf 3) *** PJSUA2 ANDROID BUILD SCRIPT (w/ TLS+VIDEO SUPPORT) ***"
echo "$(tput setaf 3) [AUTHOR: Emre TUFEKCI (tufekci.emre@tubitak.gov.tr)]"


#Go to main directory
echo "$(tput setaf 3) PJSIP MAIN DIRECTORY:"
echo $PWD
pjpath=$PWD

# Go to config_site directory
cd pjlib/include/pj/

# Remove config file (if any)
rm -rf config_site.h

### CHECK IS OPENSSL && H264 BUILDING ###
if [ ${h264_build} == true ] && [ ${openSSL_build} == true ]; then
# Add TLS & Video Config Support
echo "/* THIS <config_site.h> FILE GENERATED BY SCRIPT. Developer&Support : [tufekci.emre@tubitak.gov.tr]*/
#define PJ_CONFIG_ANDROID 1
#define PJMEDIA_HAS_VIDEO 1
#define PJ_HAS_SSL_SOCK 1
#define SRTP_AES_ICM 0
#define SRTP_AES_ICM_OSSL 1
#define PJ_HAS_IPV6 1
#define PJSIP_HAS_TLS_TRANSPORT 1
#define PJSIP_MAX_PKT_LEN 8000
#define PJMEDIA_SRTP_HAS_AES_GCM_256 1
#define PJMEDIA_SRTP_HAS_AES_GCM_128 1
#define PJMEDIA_SRTP_HAS_AES_CM_256 0
#define PJMEDIA_SRTP_HAS_AES_CM_192 0
#define PJMEDIA_SRTP_HAS_AES_CM_128 0
#define PJMEDIA_HAS_OPENH264_CODEC    1
#define PJMEDIA_HAS_LIBYUV            1
#define PJMEDIA_HAS_BCG729		1
#define PJMEDIA_HAS_OPUS_CODEC            1
#define PJMEDIA_HAS_SILK_CODEC            0
#define PJMEDIA_HAS_ALAW_ULAW_TABLE            0
#define PJMEDIA_TELEPHONE_EVENT_ALL_CLOCKRATES            0
#define PJ_HAS_ERROR_STRING            0
#define PJMEDIA_RESAMPLE_IMP PJMEDIA_RESAMPLE_LIBRESAMPLE
#define PJMEDIA_HAS_ILBC_CODEC            0
#define PJMEDIA_HAS_L16_CODEC            0
#define PJMEDIA_HAS_SPEEX_AEC            0
#define PJMEDIA_HAS_SPEEX_CODEC            0
#define PJMEDIA_HAS_GSM_CODEC            0
#define PJMEDIA_HAS_AND_MEDIA_AMRNB            0
#define PJMEDIA_HAS_AND_MEDIA_AMRWB            0
#define PJ_GETHOSTIP_DISABLE_LOCAL_RESOLUTION 1
#include <pj/config_site_sample.h>" > config_site.h


fi

#define PJ_GETADDRINFO_USE_ANDROID 1

# Go to main PJSIP directory
cd ../../../


####################################
###        CLEAN PJSIP           ###
####################################
# CLEAN PJSIP
# First of all make sure cleanup all existing binary.
eval make clean

# clean pjsua sample app
cd pjsip-apps/src/pjsua/android/jni/
eval make clean

# cleanup pjsua2 sample app
cd ../../../swig/
eval make clean

# Go to main PJSIP directory
cd ../../../


####################################
###   ANDROID-LIB FOLDER         ###
####################################
rm -rf ANDROID-LIB

mkdir ANDROID-LIB
cd ANDROID-LIB

mkdir arm64-v8a
cd arm64-v8a
mkdir java
cd ../

mkdir armeabi-v7a
cd armeabi-v7a
mkdir java
cd ../

mkdir x86
cd x86
mkdir java
cd ../

mkdir x86_64
cd x86_64
mkdir java
cd ../


# Go to main directory of pjsip
cd ../

####################################
###        DOWNLOAD GRADLE       ###
####################################


#wget https://github.com/gradle/gradle-distributions/releases/download/v8.12.1/gradle-8.12.1-bin.zip
#mkdir /opt/gradle
#unzip -d /opt/gradle gradle-8.12.1-bin.zip
#export PATH=$PATH:/opt/gradle/gradle-8.12.1/bin

####################################
###        DOWNLOAD SWIG         ###
####################################
apt install swig nasm cmake ninja-build -y



####################################
###         DOWNLOAD H264        ###
####################################

###### !! IMPORTANT NOTE !! ############
#   Because of some issues with NDK    #
#   version when building H264         #
#   we're going to use prebuilt        #
#   binaries, following lines          #
#   is about the downloading &         #
#   building h264, for now they're     #
#   commented out. Please do not       #
#   remove them.                       #
########################################

### CHECK IS H264 BUILDING ###
#Check $OPENH264_FOLDERNAME folder is exist
if [ -d $OPENH264_FOLDERNAME ]
then
    echo "$(tput setaf 7) Directory $OPENH264_FOLDERNAME exists."
else
    echo "$(tput setaf 7) WARNING: Directory $OPENH264_FOLDERNAME does not exists. Creating..."
    echo ".... Downloading H264 ...."
    wget ${h264_link}
    for f in *.zip
    do
        unzip "$f"
        rm -rf *.zip
    done
fi
#Edit Makefile for openh264
cd $OPENH264_FOLDERNAME
sed -i '24s/.*/PREFIX=android/' Makefile
cd ../

####################################
###        DOWNLOAD OPENSSL      ###
####################################
### CHECK IS OPENSSL BUILDING ###
#Check $OPENSSL_FOLDERNAME folder is exist
if [ -d $OPENSSL_FOLDERNAME ]
then
    echo "$(tput setaf 7) Directory $OPENSSL_FOLDERNAME exists."
else
    echo "$(tput setaf 7) WARNING: Directory $OPENSSL_FOLDERNAME does not exists. Creating..."
    echo ".... Downloading OpenSSL ...."
    wget ${openssl_link}
    for f in *ssl*.tar.gz
    do
        tar zxf "$f"
        rm -rf *.tar.gz
    done
fi

####################################
###        DOWNLOAD OPUS         ###
####################################
#Check $OPENSSL_FOLDERNAME folder is exist
if [ -d $OPUS_FOLDERNAME ]
then
    echo "$(tput setaf 7) Directory $OPUS_FOLDERNAME exists."
else
    echo "$(tput setaf 7) WARNING: Directory $OPUS_FOLDERNAME does not exists. Creating..."
    echo ".... Downloading OPUS ...."
    wget ${opus_link}
        for f in *opus*.tar.gz
    do
    tar zxf "$f"
    rm -rf *.tar.gz
    done
fi

cd $OPUS_FOLDERNAME
mkdir -p jni

echo 'LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)

MY_MODULE_DIR       := opus

LOCAL_MODULE        := $(MY_MODULE_DIR)
LOCAL_SRC_FILES     := \
    $(subst $(ROOT_DIR)/$(MY_MODULE_DIR)/,,$(wildcard $(ROOT_DIR)/$(MY_MODULE_DIR)/src/*.c*)) \
    $(subst $(ROOT_DIR)/$(MY_MODULE_DIR)/,,$(wildcard $(ROOT_DIR)/$(MY_MODULE_DIR)/celt/*.c*)) \
    $(subst $(ROOT_DIR)/$(MY_MODULE_DIR)/,,$(wildcard $(ROOT_DIR)/$(MY_MODULE_DIR)/silk/*.c*)) \
    $(subst $(ROOT_DIR)/$(MY_MODULE_DIR)/,,$(wildcard $(ROOT_DIR)/$(MY_MODULE_DIR)/silk/fixed/*.c*))
LOCAL_LDLIBS        := -lm -llog
LOCAL_C_INCLUDES    := \
    $(ROOT_DIR)/$(MY_MODULE_DIR)/include \
    $(ROOT_DIR)/$(MY_MODULE_DIR)/silk \
    $(ROOT_DIR)/$(MY_MODULE_DIR)/silk/fixed \
    $(ROOT_DIR)/$(MY_MODULE_DIR)/celt
LOCAL_CFLAGS        := -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
LOCAL_CFLAGS    += -Drestrict="" -D__EMX__ -DOPUS_BUILD -DFIXED_POINT -DUSE_ALLOCA -DHAVE_LRINT -DHAVE_LRINTF -O3 -fno-math-errno
LOCAL_CPPFLAGS      := -DBSD=1 
LOCAL_CPPFLAGS          += -ffast-math -O3 -funroll-loops

include $(BUILD_STATIC_LIBRARY)
' > jni/Android.mk
eval ./opus/autogen.sh
mkdir -p include/opus
mkdir -p lib
cp include/*.h include/opus/
cd ..

####################################
###         DOWNLOAD-NDK         ###
####################################
#Check NDK folder is exist
if [ -d $ANDROID_NDK_FOLDERNAME ]
then
    echo "$(tput setaf 7) Directory $ANDROID_NDK_FOLDERNAME exists."
else
    echo "$(tput setaf 7) WARNING: Directory $ANDROID_NDK_FOLDERNAME does not exists. Creating..."
    echo ".... Downloading NDK ...."
    wget ${ndk_link}
        for f in *.zip
    do
    unzip "$f"
    rm -rf *.zip
    done
fi

####################################
###         DOWNLOAD-BCG729      ###
####################################
#Check NDK folder is exist
if [ -d $BCG729_FOLDERNAME ]
then
    echo "$(tput setaf 7) Directory $BCG729_FOLDERNAME exists."
else
    echo "$(tput setaf 7) WARNING: Directory $BCG729_FOLDERNAME does not exists. Creating..."
    echo ".... Downloading NDK ...."
    wget ${bcg729_link} -O $BCG729_FOLDERNAME.zip
        for f in *.zip
    do
    unzip "$f"
    rm -rf *.zip
    done
fi


####################################
###          ARM64-V8A           ###
####################################
if [ "${build_platform}" = "ARM64-V8A" ] || [ "${build_platform}" = "ALL" ]
then

### Build OPUS
export ANDROID_NDK_HOME=$PWD/$ANDROID_NDK_FOLDERNAME
export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME
eval PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_HOME/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH
echo "OPUS Build!"
mkdir -p $OPUS_FOLDERNAME/build
cd $OPUS_FOLDERNAME/build
cmake .. -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a
cmake --build . -j 2 --config Release --target package
cp libopus.a ../lib/
cd ..
rm -rf build
cd ..

### Build BCG729
cd $BCG729_FOLDERNAME
cmake -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-35 -GNinja -B build
mkdir -p lib
cd build
eval ninja
eval cp ./src/*.a ../lib/
cd ../..

### Build OpenSSL
cd $OPENSSL_FOLDERNAME
if [[ $openssl_link == *"boringssl"* ]]; then
  echo "BoringSSL Configure and Build!"
  eval cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-35 -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -GNinja -B build
  mkdir -p lib
  cd build
  eval ninja
  eval cp *.a ../lib/
  cd ../..
elif [[ $openssl_link == *"openssl"* ]]; then
  echo "OpenSSL Configure and Build!"
  eval ./Configure android-arm64 -D__ANDROID_API__=35 -U__ANDROID_API__
  eval make
  mkdir -p lib
  eval cp *.a lib/
  cd ../
fi

### Build H264
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
export PATH=$PWD/../../../Android/Sdk/tools:$PATH
rm -rf android
mkdir android
cd android
mkdir -p lib
cd ../
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm64
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm64 clean
eval make install OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm64
cd ../
fi

### Build PJSIP
eval export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME

eval TARGET_ABI=arm64-v8a ./configure-android --use-ndk-cflags $WITH_SSL_OPTION $WITH_OPENH264_OPTION $WITH_BCG729_OPTION $WITH_OPUS_OPTION $PJSIP_ADDITIONAL_OPTIONS
eval make dep && make


### Build SWIG
cd pjsip-apps/src/swig
eval make

### Copy .java files
cp -r java/android/pjsua2/src/main/java ../../../ANDROID-LIB/arm64-v8a/java


### Copy .so files

# PJ .so
cd java/android/pjsua2/src/main/jniLibs/arm64-v8a
cp *.so ../../../../../../../../../../ANDROID-LIB/arm64-v8a
cd ../../../../../../../../../../

#OpenH264 .so
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
cp *.so ../ANDROID-LIB/arm64-v8a/
cd ../
fi

# OpenSSL .so
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME
cp *.so ../ANDROID-LIB/arm64-v8a/
cd ../
fi

####################################
###         CLEAN OPENSSL        ###
####################################
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME
eval make clean
rm -rf lib
cd ../
fi

####################################
###         CLEAN H264           ###
####################################
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm64 clean
eval make clean
rm -rf android
cd ../
fi

####################################
###        CLEAN PJSIP           ###
####################################
eval make clean
cd pjsip-apps/src/pjsua/android/jni
eval make clean
cd ../../../swig
eval make clean
cd ../../../


dt=$(date '+%d/%m/%Y %H:%M:%S')
echo "$dt : Finished ARM64-V8A"

fi

####################################
###        ARMEABI-V7A           ###
####################################
if [ "${build_platform}" = "ARMEABI-V7A" ] || [ "${build_platform}" = "ALL" ]
then

### Build OPUS
export ANDROID_NDK_HOME=$PWD/$ANDROID_NDK_FOLDERNAME
export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME
echo "OPUS Build!"
mkdir -p $OPUS_FOLDERNAME/build
cd $OPUS_FOLDERNAME/build
cmake .. -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a
cmake --build . -j 2 --config Release --target package
cp libopus.a ../lib/
cd ..
rm -rf build
cd ..

### Build BCG729
cd $BCG729_FOLDERNAME
cmake -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-35 -GNinja -B build
mkdir -p lib
cd build
eval ninja
eval cp ./src/*.a ../lib/
cd ../..


### Build OpenSSL
if [ ${openSSL_build} == true ]; then
export ANDROID_NDK_HOME=$PWD/$ANDROID_NDK_FOLDERNAME

cd $OPENSSL_FOLDERNAME
if [[ $openssl_link == *"boringssl"* ]]; then
  echo "BoringSSL Configure and Build!"
  eval cmake -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-35 -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -GNinja -B build
  mkdir -p lib
  cd build
  eval ninja
  eval cp *.a ../lib/
  cd ../..
elif [[ $openssl_link == *"openssl"* ]]; then
  echo "OpenSSL Configure and Build!"
  eval ./Configure android-arm -D__ANDROID_API__=35 -U__ANDROID_API__
  eval make
  mkdir -p lib
  eval cp *.a lib/
  cd ../
fi
fi


### Build H264
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
export PATH=$PWD/../../../Android/Sdk/tools:$PATH
rm -rf android
mkdir android
cd android
mkdir -p lib
cd ../
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm clean
eval make install OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm
cd ../
fi

### Build PJSIP
eval export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME

### CHECK IS OPENSSL && H264 BUILDING ###
eval TARGET_ABI=armeabi-v7a ./configure-android --use-ndk-cflags $WITH_SSL_OPTION $WITH_OPENH264_OPTION $WITH_BCG729_OPTION $WITH_OPUS_OPTION $PJSIP_ADDITIONAL_OPTIONS
eval make dep && make




### Build SWIG
cd pjsip-apps/src/swig
eval make

### Copy .java files
cp -r java/android/pjsua2/src/main/java ../../../ANDROID-LIB/armeabi-v7a/java


### Copy .so files


# PJ .so
cd java/android/pjsua2/src/main/jniLibs/armeabi-v7a
cp *.so ../../../../../../../../../../ANDROID-LIB/armeabi-v7a
cd ../../../../../../../../../../

#OpenH264 .so
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
cp *.so ../ANDROID-LIB/armeabi-v7a/
cd ../
fi

# OpenSSL .so
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME/
cp *.so ../ANDROID-LIB/armeabi-v7a/
cd ../
fi


####################################
###         CLEAN OPENSSL        ###
####################################
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME
eval make clean
rm -rf lib
cd ../
fi

####################################
###         CLEAN H264           ###
####################################
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=arm clean
eval make clean
rm -rf android
cd ../
fi

####################################
###        CLEAN PJSIP           ###
####################################
eval make clean
cd pjsip-apps/src/pjsua/android/jni
eval make clean
cd ../../../swig
eval make clean
cd ../../../

dt=$(date '+%d/%m/%Y %H:%M:%S')
echo "$dt : Finished ARMEABI-V7A"

fi

####################################
###             X86              ###
####################################
if [ "${build_platform}" = "X86" ] || [ "${build_platform}" = "ALL" ]
then


### Build OPUS
export ANDROID_NDK_HOME=$PWD/$ANDROID_NDK_FOLDERNAME
export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME
echo "OPUS Build!"
mkdir -p $OPUS_FOLDERNAME/build
cd $OPUS_FOLDERNAME/build
cmake .. -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86
cmake --build . -j 2 --config Release --target package
cp libopus.a ../lib/
cd ..
rm -rf build
cd ..

### Build BCG729
cd $BCG729_FOLDERNAME
cmake -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86 -DANDROID_PLATFORM=android-35 -GNinja -B build
mkdir -p lib
cd build
eval ninja
eval cp ./src/*.a ../lib/
cd ../..


### Build OpenSSL
cd $OPENSSL_FOLDERNAME
if [[ $openssl_link == *"boringssl"* ]]; then
  echo "BoringSSL Configure and Build!"
  eval cmake -DANDROID_ABI=x86 -DANDROID_PLATFORM=android-35 -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -GNinja -B build
  mkdir -p lib
  cd build
  eval ninja
  eval cp *.a ../lib/
  cd ../..
elif [[ $openssl_link == *"openssl"* ]]; then
  echo "OpenSSL Configure and Build!"
  eval ./Configure android-x86 -D__ANDROID_API__=35 -U__ANDROID_API__
  eval make
  mkdir -p lib
  eval cp *.a lib/
  cd ../
fi


### Build H264
if [ ${h264_build} == true ]; then

cd $OPENH264_FOLDERNAME

### Fix x86 problem https://github.com/cisco/openh264/issues/3747
NASM="$(command -v nasm)"
cat > nasm <<EOF
#!/bin/sh
exec "$NASM" -DX86_32_PICASM "\$@"
EOF
chmod +x nasm
export PATH="$PWD:$PATH"

export PATH=$PWD/../../../Android/Sdk/tools:$PATH
rm -rf android
mkdir android
cd android
mkdir -p lib
cd ../
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86 -fPIC
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86 clean
eval make install OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86
rm -f nasm
cd ../
fi

### Build PJSIP
eval export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME

eval TARGET_ABI=x86 ./configure-android --use-ndk-cflags $WITH_SSL_OPTION $WITH_OPENH264_OPTION $WITH_BCG729_OPTION $WITH_OPUS_OPTION $PJSIP_ADDITIONAL_OPTIONS
eval make dep && make



### Build SWIG
cd pjsip-apps/src/swig
eval make

### Copy .java files
cp -r java/android/pjsua2/src/main/java ../../../ANDROID-LIB/x86/java

### Copy .so files

# PJ .so
cd java/android/pjsua2/src/main/jniLibs/x86
cp *.so ../../../../../../../../../../ANDROID-LIB/x86
cd ../../../../../../../../../../

#OpenH264 .so
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
cp *.so ../ANDROID-LIB/x86/
cd ../
fi

# OpenSSL .so
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME/
cp *.so ../ANDROID-LIB/x86/
cd ../
fi

####################################
###         CLEAN OPENSSL        ###
####################################
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME
eval make clean
rm -rf lib
cd ../
fi

####################################
###         CLEAN H264           ###
####################################
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86 clean
eval make clean
rm -rf android
mkdir android
cd ../
fi

####################################
###        CLEAN PJSIP           ###
####################################
eval make clean
cd pjsip-apps/src/pjsua/android/jni
eval make clean
cd ../../../swig
eval make clean
cd ../../../

dt=$(date '+%d/%m/%Y %H:%M:%S')
echo "$dt : Finished X86"

fi

####################################
###          X86_64              ###
####################################
if [ "${build_platform}" = "X86_64" ] || [ "${build_platform}" = "ALL" ]
then


### Build OPUS
export ANDROID_NDK_HOME=$PWD/$ANDROID_NDK_FOLDERNAME
export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME
echo "OPUS Build!"
mkdir -p $OPUS_FOLDERNAME/build
cd $OPUS_FOLDERNAME/build
cmake .. -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86_64
cmake --build . -j 2 --config Release --target package
cp libopus.a ../lib/
cd ..
rm -rf build
cd ..

### Build BCG729
cd $BCG729_FOLDERNAME
cmake -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86_64 -DANDROID_PLATFORM=android-35 -GNinja -B build
mkdir -p lib
cd build
eval ninja
eval cp ./src/*.a ../lib/
cd ../..

### Build OpenSSL
cd $OPENSSL_FOLDERNAME
if [[ $openssl_link == *"boringssl"* ]]; then
  echo "BoringSSL Configure and Build!"
  eval cmake -DANDROID_ABI=x86_64 -DANDROID_PLATFORM=android-35 -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake -GNinja -B build
  mkdir -p lib
  cd build
  eval ninja
  eval cp *.a ../lib/
  cd ../..
elif [[ $openssl_link == *"openssl"* ]]; then
  echo "OpenSSL Configure and Build!"
  eval ./Configure android-x86_64 -D__ANDROID_API__=35 -U__ANDROID_API__
  eval make
  mkdir -p lib
  eval cp *.a lib/
  cd ../
fi


### Build H264
cd $OPENH264_FOLDERNAME
export PATH=$PWD/../../../Android/Sdk/tools:$PATH
rm -rf android
mkdir android
cd android
mkdir -p lib
cd ../
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86_64
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86_64 clean
eval make install OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86_64
cd ../

### Build PJSIP
eval export ANDROID_NDK_ROOT=$PWD/$ANDROID_NDK_FOLDERNAME

eval TARGET_ABI=x86_64 ./configure-android --use-ndk-cflags $WITH_SSL_OPTION $WITH_OPENH264_OPTION $WITH_BCG729_OPTION $WITH_OPUS_OPTION $PJSIP_ADDITIONAL_OPTIONS
eval make dep && make

### Build SWIG
cd pjsip-apps/src/swig
eval make

### Copy .java files
cp -r java/android/pjsua2/src/main/java ../../../ANDROID-LIB/x86_64/java

### Copy .so files


# PJ .so
cd java/android/pjsua2/src/main/jniLibs/x86_64
cp *.so ../../../../../../../../../../ANDROID-LIB/x86_64
cd ../../../../../../../../../../

#OpenH264 .so
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
cp *.so ../ANDROID-LIB/x86_64/
cd ../
fi


# OpenSSL .so
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME/
cp *.so ../ANDROID-LIB/x86_64/
cd ../
fi

####################################
###         CLEAN OPENSSL        ###
####################################
if [ ${openSSL_build} == true ]; then
cd $OPENSSL_FOLDERNAME
eval make clean
rm -rf lib
cd ../
fi

####################################
###         CLEAN H264           ###
####################################
if [ ${h264_build} == true ]; then
cd $OPENH264_FOLDERNAME
eval make OS=android NDKROOT=$PWD/../$ANDROID_NDK_FOLDERNAME TARGET=android-35 ARCH=x86_64 clean
eval make clean
rm -rf android
mkdir android
cd ../
fi

####################################
###        CLEAN PJSIP           ###
####################################
eval make clean
cd pjsip-apps/src/pjsua/android/jni
eval make clean
cd ../../../swig
eval make clean
cd ../../../

dt=$(date '+%d/%m/%Y %H:%M:%S')
echo "$dt : Finished X86_64"

fi

echo "pjpath is"
echo $pjpath


echo "DONE !!!"
